# AI Service Docker Compose Configuration
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: ai_service_postgres
    environment:
      POSTGRES_DB: ai_service_db
      POSTGRES_USER: ai_user
      POSTGRES_PASSWORD: ai_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5434:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - ai_service_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ai_user -d ai_service_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: ai_service_redis
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    networks:
      - ai_service_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # AI Service
  ai_service:
    build: .
    container_name: ai_service
    ports:
      - "8003:8003"
    environment:
      - AI_SERVICE_HOST=0.0.0.0
      - AI_SERVICE_PORT=8003
      - DATABASE_URL=postgresql://ai_user:ai_password@postgres:5432/ai_service_db
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DEFAULT_EMBEDDING_MODEL=text-embedding-3-small
      - DEFAULT_CHAT_MODEL=gpt-4o-mini
      - LOG_LEVEL=INFO
      - ENVIRONMENT=development
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ai_service_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: ai_service_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@ai-service.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8083:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - ai_service_network
    restart: unless-stopped

  # Vector Database (ChromaDB) - Optional
  chromadb:
    image: chromadb/chroma:latest
    container_name: ai_service_chromadb
    ports:
      - "8004:8000"
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
      - CHROMA_SERVER_CORS_ALLOW_ORIGINS=["*"]
    volumes:
      - chromadb_data:/chroma/chroma
    networks:
      - ai_service_network
    restart: unless-stopped
    profiles:
      - vector-store

  # Monitoring with Prometheus and Grafana - Optional
  prometheus:
    image: prom/prometheus:latest
    container_name: ai_service_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ai_service_network
    restart: unless-stopped
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: ai_service_grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - ai_service_network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local
  chromadb_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  ai_service_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16



