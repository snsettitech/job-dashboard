version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:13
    container_name: user_service_postgres
    environment:
      POSTGRES_DB: user_service_db
      POSTGRES_USER: user_service_user
      POSTGRES_PASSWORD: user_service_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - user_service_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user_service_user -d user_service_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # User Service
  user_service:
    build: .
    container_name: user_service_api
    environment:
      - DATABASE_URL=postgresql://user_service_user:user_service_password@postgres:5432/user_service_db
      - JWT_SECRET_KEY=your-super-secret-jwt-key-change-this-in-production
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - REFRESH_TOKEN_EXPIRE_DAYS=7
      - SESSION_TOKEN_EXPIRE_DAYS=30
      - ALLOWED_ORIGINS=http://localhost:3000,http://localhost:8000,http://localhost:8001
      - DB_POOL_SIZE=10
      - DB_MAX_OVERFLOW=20
      - DB_ECHO=false
      - ENVIRONMENT=development
    ports:
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - user_service_network
    volumes:
      - .:/app
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis (for future caching)
  redis:
    image: redis:6-alpine
    container_name: user_service_redis
    ports:
      - "6379:6379"
    networks:
      - user_service_network
    volumes:
      - redis_data:/data
    restart: unless-stopped

  # pgAdmin (for database management)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: user_service_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@user-service.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - user_service_network
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  pgadmin_data:

networks:
  user_service_network:
    driver: bridge

